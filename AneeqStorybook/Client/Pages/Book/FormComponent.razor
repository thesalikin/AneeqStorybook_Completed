@inject HttpClient _client

<EditForm Model="@Book" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Author: </label>
            <div>
                <InputSelect @bind-Value="Book.AuthorId" class="form-control">
                    <option value="">-- Select Author --</option>
                    @if (Authors != null)
                {
                    foreach (var Author in Authors)
                    {
                    <option value="@Author.Id">@Author.Name</option>
            }
        }
                </InputSelect>
                <ValidationMessage For="@(() => Book.AuthorId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Title: </label>
            <div>
                <InputSelect @bind-Value="Book.TitleId" class="form-control">
                    <option value="">-- Select Title --</option>
                    @if (Titles != null)
                {
                    foreach (var Title in Titles)
                    {
                    <option value="@Title.Id">@Title.Name</option>
            }
        }
                </InputSelect>
                <ValidationMessage For="@(() => Book.TitleId)" />
            </div>
        </div>

    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="Books" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Book Book { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Author> Authors;
    private IList<Title> Titles;

    protected async override Task OnInitializedAsync()
    {
        Authors = await _client.GetFromJsonAsync<List<Author>>($"{Endpoints.AuthorsEndpoint}");
        Titles = await _client.GetFromJsonAsync<List<Title>>($"{Endpoints.TitlesEndpoint}");
    }
}