@inject HttpClient _client

<EditForm Model="@Reservation" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Book: </label>
            <div>
                <InputSelect @bind-Value="Reservation.BookId" class="form-control">
                    <option value="">-- Select Book --</option>
                    @if (Books != null)
                {
                    foreach (var Book in Books)
                    {
                    <option value="@Book.Id">@Book.Author.Name - @Book.Title.Name </option>
            }
        }
                </InputSelect>
                <ValidationMessage For="@(() => Reservation.BookId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Patron: </label>
            <div>
                <InputSelect @bind-Value="Reservation.PatronId" class="form-control">
                    <option value="">-- Select Patron --</option>
                    @if (Patrons != null)
                {
                    foreach (var Patron in Patrons)
                    {
                    <option value="@Patron.Id">@Patron.FirstName - @Patron.LastName </option>
            }
        }
                </InputSelect>
                <ValidationMessage For="@(() => Reservation.PatronId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Date Out: </label>
            <div>
                <InputDate @bind-Value="@Reservation.DateOut" class="form-control" />
                <ValidationMessage For="@(() => Reservation.DateOut)" />
            </div>
        </div>


        @if (Reservation.Id > 0)
        {
            <div class="form-group">
                <label>Date In: </label>
                <div>
                    <InputDate @bind-Value="@Reservation.DateIn" class="form-control" />
                    <ValidationMessage For="@(() => Reservation.DateIn)" />
                </div>
            </div>
        }
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="Reservations" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Reservation Reservation { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Book> Books;
    private IList<Patron> Patrons;

    protected async override Task OnInitializedAsync()
    {
        Books = await _client.GetFromJsonAsync<List<Book>>($"{Endpoints.BooksEndpoint}");
        Patrons = await _client.GetFromJsonAsync<List<Patron>>($"{Endpoints.PatronsEndpoint}");
        //Reservation.DateOut = DateTime.Now;
    }
}
